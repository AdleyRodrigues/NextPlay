// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextPlay.Api.Infrastructure.Ef;

#nullable disable

namespace NextPlay.Api.Migrations
{
    [DbContext(typeof(NextPlayDbContext))]
    partial class NextPlayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SteamId64")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("SteamId64", "AppId", "Action");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Game", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ControllerFriendly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AppId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Hltb", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompletionistMin")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainExtraMin")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainMin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AppId");

                    b.ToTable("Hltbs");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Ownership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("AchievementPct")
                        .HasColumnType("REAL");

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPlayed")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlaytimeMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SteamId64")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("SteamId64", "AppId")
                        .IsUnique();

                    b.ToTable("Ownerships");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Scores", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Metacritic")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OpenCritic")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SteamPositivePct")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AppId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.UserPrefs", b =>
                {
                    b.Property<string>("SteamId64")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockedTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ControllerPreferred")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LikedGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LikedTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxMainH")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetacriticMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinMainH")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OpenCriticMin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PtbrOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SteamPositiveMin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("SteamId64");

                    b.ToTable("UserPrefs");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("NextPlay.Api.Domain.Entities.Game", "Game")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Hltb", b =>
                {
                    b.HasOne("NextPlay.Api.Domain.Entities.Game", "Game")
                        .WithOne("Hltb")
                        .HasForeignKey("NextPlay.Api.Domain.Entities.Hltb", "AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Ownership", b =>
                {
                    b.HasOne("NextPlay.Api.Domain.Entities.Game", "Game")
                        .WithMany("Ownerships")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Scores", b =>
                {
                    b.HasOne("NextPlay.Api.Domain.Entities.Game", "Game")
                        .WithOne("Scores")
                        .HasForeignKey("NextPlay.Api.Domain.Entities.Scores", "AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NextPlay.Api.Domain.Entities.Game", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Hltb");

                    b.Navigation("Ownerships");

                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
